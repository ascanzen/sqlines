# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _sqlines
else:
    import _sqlines

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SQL_SQL_SERVER = _sqlines.SQL_SQL_SERVER
SQL_ORACLE = _sqlines.SQL_ORACLE
SQL_DB2 = _sqlines.SQL_DB2
SQL_MYSQL = _sqlines.SQL_MYSQL
SQL_POSTGRESQL = _sqlines.SQL_POSTGRESQL
SQL_SYBASE = _sqlines.SQL_SYBASE
SQL_INFORMIX = _sqlines.SQL_INFORMIX
SQL_GREENPLUM = _sqlines.SQL_GREENPLUM
SQL_SYBASE_ASA = _sqlines.SQL_SYBASE_ASA
SQL_TERADATA = _sqlines.SQL_TERADATA
SQL_NETEZZA = _sqlines.SQL_NETEZZA
SQL_MARIADB = _sqlines.SQL_MARIADB
SQL_HIVE = _sqlines.SQL_HIVE
SQL_REDSHIFT = _sqlines.SQL_REDSHIFT
SQL_ESGYNDB = _sqlines.SQL_ESGYNDB
SQL_SYBASE_ADS = _sqlines.SQL_SYBASE_ADS
SQL_MARIADB_ORA = _sqlines.SQL_MARIADB_ORA

def CreateParserObject():
    return _sqlines.CreateParserObject()

def SetParserTypes(parser, source, target):
    return _sqlines.SetParserTypes(parser, source, target)

def SetParserOption(parser, option, value):
    return _sqlines.SetParserOption(parser, option, value)

def ConvertSql(parser, input, size, output, out_size, lines):
    return _sqlines.ConvertSql(parser, input, size, output, out_size, lines)

def FreeOutput(output):
    return _sqlines.FreeOutput(output)

def CreateAssessmentReport(parser, summary):
    return _sqlines.CreateAssessmentReport(parser, summary)

